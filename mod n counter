library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_arith.all;
use ieee.std_logic_unsigned.all;
entity Mod_N_Counter is
generic (N: integer := 5);
Port (
clk : in STD_LOGIC;
reset : in STD_LOGIC;
Q : out STD_LOGIC_VECTOR (N-1 downto 0)
);
end Mod_N_Counter;
architecture Behavioral of Mod_N_Counter is
signal count : std_logic_vector(N-1 downto 0);
signal clkout : std_logic;
signal counter : integer range 0 to 49999999 := 0;
signal temp : std_logic_vector(3 downto 0);
begin
process (clk, reset)
begin
if (reset = '1') then
clkout <= '0';
counter <= 0;
elsif (clk'event and clk = '1') then
if (counter = 49999999) then
clkout <= not clkout;
counter <= 0;
else
counter <= counter + 1;
end if;
end if;
end process;
process (clkout, reset)
begin
if (clkout'event and clkout = '1') then
if reset = '1' then
count <= (others => '0');
else
if (count = "0100") then
count <= (others => '0');
else
count <= count + '1'; -- Increment count
end if;
end if;
end if;
end process;
Q <= count;
end Behavioral;


2. VHDL Test Bench Code
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_unsigned.ALL;
entity MOD_N_COUNTER_TB is
end MOD_N_COUNTER_TB;
architecture Behavioral of MOD_N_COUNTER_TB is
component Mod_N_Counter is
port (
clk : in std_logic;
reset : in std_logic;
Q : out std_logic_vector(4 downto 0)
);
end component;
signal clk : std_logic;
signal reset : std_logic;
signal Q : std_logic_vector(4 downto 0);
constant clk_period : time := 10 ns;
begin
uut: Mod_N_Counter
port map (
clk => clk,
reset => reset,
Q => Q
);
-- Clock generation
process
begin
clk <= '0';
wait for clk_period / 2;
clk <= '1';
wait for clk_period / 2;
end process;
-- Stimulus process
process
begin
reset <= '1';
wait for 10 ns;
reset <= '0';
wait for 10 ns;
wait for 50 ns;
reset <= '1';
wait for 10 ns;
reset <= '0';
wait for 10 ns;
wait for 100ns;
wait;
end process;
end Behavioral;
